{"title":"$:/plugins/wikilabs/custom-markup","name":"Custom Markup","description":"Adds a possibilty to style text content with wikitext syntax","list":"readme license history","version":"0.5.1","plugin-type":"plugin","dependents":"","type":"application/json","text":"{\n    \"tiddlers\": {\n        \"$:/config/ShortcutInfo/add-angel\": {\n            \"title\": \"$:/config/ShortcutInfo/add-angel\",\n            \"type\": \"text/vnd.tiddlywiki\",\n            \"text\": \"{{$:/plugins/wikilabs/custom-markup/EditorToolbar/add-angel!!description}}\"\n        },\n        \"$:/config/ShortcutInfo/add-newline\": {\n            \"title\": \"$:/config/ShortcutInfo/add-newline\",\n            \"type\": \"text/vnd.tiddlywiki\",\n            \"text\": \"{{$:/plugins/wikilabs/custom-markup/EditorToolbar/add-newline!!description}}\"\n        },\n        \"$:/config/ShortcutInfo/remove-angel\": {\n            \"title\": \"$:/config/ShortcutInfo/remove-angel\",\n            \"type\": \"text/vnd.tiddlywiki\",\n            \"text\": \"{{$:/plugins/wikilabs/custom-markup/EditorToolbar/remove-angel!!description}}\"\n        },\n        \"$:/config/ShortcutInfo/remove-custom-markers\": {\n            \"title\": \"$:/config/ShortcutInfo/remove-custom-markers\",\n            \"type\": \"text/vnd.tiddlywiki\",\n            \"text\": \"{{$:/plugins/wikilabs/custom-markup/EditorToolbar/remove-custom-markers!!description}}\"\n        },\n        \"$:/config/ShortcutInfo/toggle-tick\": {\n            \"title\": \"$:/config/ShortcutInfo/toggle-tick\",\n            \"type\": \"text/vnd.tiddlywiki\",\n            \"text\": \"{{$:/plugins/wikilabs/custom-markup/EditorToolbar/toggle-tick!!description}}\"\n        },\n        \"$:/config/shortcuts/add-angel\": {\n            \"title\": \"$:/config/shortcuts/add-angel\",\n            \"tags\": \"\",\n            \"text\": \"ctrl-7\"\n        },\n        \"$:/config/shortcuts/add-newline\": {\n            \"title\": \"$:/config/shortcuts/add-newline\",\n            \"tags\": \"\",\n            \"text\": \"ctrl-shift-Enter\"\n        },\n        \"$:/config/shortcuts/remove-angel\": {\n            \"title\": \"$:/config/shortcuts/remove-angel\",\n            \"tags\": \"\",\n            \"text\": \"ctrl-6\"\n        },\n        \"$:/config/shortcuts/remove-custom-markers\": {\n            \"title\": \"$:/config/shortcuts/remove-custom-markers\",\n            \"tags\": \"\",\n            \"text\": \"ctrl-8\"\n        },\n        \"$:/config/shortcuts/toggle-tick\": {\n            \"title\": \"$:/config/shortcuts/toggle-tick\",\n            \"tags\": \"\",\n            \"text\": \"ctrl-9\"\n        },\n        \"$:/plugins/wikilabs/custom-markup/EditorToolbar/notify/id-prepared\": {\n            \"title\": \"$:/plugins/wikilabs/custom-markup/EditorToolbar/notify/id-prepared\",\n            \"text\": \"ID Button prepared!<br>\\r\\nContent copied to clipboard!\"\n        },\n        \"$:/plugins/wikilabs/custom-markup/EditorToolbar/add-angel\": {\n            \"title\": \"$:/plugins/wikilabs/custom-markup/EditorToolbar/add-angel\",\n            \"caption\": \"add-angel\",\n            \"condition\": \"[<targetTiddler>!has[type]] [<targetTiddler>type[text/vnd.tiddlywiki]]\",\n            \"description\": \"Add a \\\"angel bracket\\\" at the start of the selected line(s)\",\n            \"icon\": \"$:/plugins/wikilabs/custom-markup/icons/angel-plus\",\n            \"shortcuts\": \"((add-angel))\",\n            \"tags\": \"$:/tags/EditorToolbar\",\n            \"text\": \"<$action-sendmessage\\n\\t$message=\\\"tm-edit-text-operation\\\"\\n\\t$param=\\\"add-tick\\\"\\n\\tcharacter=\\\"»\\\"\\n\\tcount=\\\"1\\\"\\n/>\\n\"\n        },\n        \"$:/plugins/wikilabs/custom-markup/EditorToolbar/add-newline\": {\n            \"title\": \"$:/plugins/wikilabs/custom-markup/EditorToolbar/add-newline\",\n            \"caption\": \"add-newline\",\n            \"condition\": \"[<targetTiddler>!has[type]] [<targetTiddler>type[text/vnd.tiddlywiki]]\",\n            \"description\": \"Adds a newline character at the end of the selected line(s)\",\n            \"icon\": \"$:/plugins/wikilabs/custom-markup/icons/add-newline\",\n            \"shortcuts\": \"((add-newline))\",\n            \"tags\": \"$:/tags/EditorToolbar\",\n            \"text\": \"<$action-sendmessage\\n\\t$message=\\\"tm-edit-text-operation\\\"\\n\\t$param=\\\"add-newline\\\"\\n\\tcharacter=\\\"\\n\\\"\\n\\tcount=\\\"1\\\"\\n/>\\n\"\n        },\n        \"$:/plugins/wikilabs/custom-markup/EditorToolbar/add-tick\": {\n            \"title\": \"$:/plugins/wikilabs/custom-markup/EditorToolbar/add-tick\",\n            \"caption\": \"add-tick\",\n            \"condition\": \"[<targetTiddler>!has[type]] [<targetTiddler>type[text/vnd.tiddlywiki]]\",\n            \"created\": \"20200830145744005\",\n            \"description\": \"Add a \\\"tick\\\" at the start of the selected line(s)\",\n            \"icon\": \"$:/plugins/wikilabs/custom-markup/icons/tick-plus\",\n            \"modified\": \"20200913204237400\",\n            \"shortcuts\": \"((add-tick))\",\n            \"type\": \"text/vnd.tiddlywiki\",\n            \"text\": \"<$action-sendmessage\\n\\t$message=\\\"tm-edit-text-operation\\\"\\n\\t$param=\\\"add-tick\\\"\\n\\tcharacter={{{ [[$:/config/edit/linePrefix]get[text]] }}}\\n\\tcount=\\\"1\\\"\\n/>\\n\"\n        },\n        \"$:/plugins/wikilabs/custom-markup/EditorToolbar/prefix-dropdown\": {\n            \"title\": \"$:/plugins/wikilabs/custom-markup/EditorToolbar/prefix-dropdown\",\n            \"type\": \"text/vnd.tiddlywiki\",\n            \"text\": \"\\\\define selectActions()\\n<$action-createtiddler $basetitle=\\\"$:/config/edit/linePrefix\\\" $overwrite=\\\"yes\\\" \\n    text={{{ [<linePrefix>get[text]] }}}\\n    name=\\\"\\\"\\\"$(linePrefix)$\\\"\\\"\\\" \\n    id={{{ [<linePrefix>get[id]]~´ }}}\\n/>\\n<$action-sendmessage $message=\\\"tm-copy-to-clipboard\\\" $param={{{ [{$:/config/edit/linePrefix!!id}addsuffix{$:/config/edit/linePrefix!!text}] }}}/>\\n<$action-sendmessage $message=\\\"tm-notify\\\" $param=\\\"$:/plugins/wikilabs/custom-markup/EditorToolbar/notify/id-prepared\\\"/>\\n<$action-deletetiddler $tiddler=<<dropdown-state>> />\\n\\\\end\\n\\\\define idSelector()\\n<$tiddler tiddler=\\\"$:/config/edit/linePrefix\\\">\\n  <$radio field=\\\"id\\\" value=\\\"›\\\"> › </$radio>|\\n  <$radio field=\\\"id\\\" value=\\\"´\\\"> ´ </$radio>|\\n  <$radio field=\\\"id\\\" value=\\\"°\\\"> ° </$radio>|\\n  <$radio field=\\\"id\\\" value=\\\"_\\\"> _ </$radio>||\\n  <$radio field=\\\"id\\\" value=\\\"»\\\"> » </$radio>|\\n  <$radio field=\\\"id\\\" value=\\\"≈\\\"> ≈ </$radio>|\\n  <$checkbox \\n     field=force\\n     checked=\\\"yes\\\"\\n     unchecked=\\\"no\\\"\\n     default=\\\"no\\\" > Use all lines</$checkbox>\\n</$tiddler>\\n\\\\end\\n\\\\define preview-type-button()\\n<$button tag=\\\"a\\\" actions=<<selectActions>> >\\n\\n<$transclude tiddler=<<linePrefix>> field=\\\"caption\\\" mode=\\\"inline\\\">\\n\\n<$view tiddler=<<linePrefix>> field=\\\"title\\\" mode=\\\"inline\\\"/>\\n\\n</$transclude> \\n\\n<$reveal tag=\\\"span\\\" stateTitle=\\\"$:/config/edit/linePrefix\\\" stateField=name type=\\\"match\\\" text=<<linePrefix>> default=\\\"XXXXX\\\">\\n\\n<$entity entity=\\\"&nbsp;\\\"/>\\n\\n<$entity entity=\\\"&#x2713;\\\"/>\\n\\n</$reveal>\\n\\n</$button>\\n\\\\end\\n\\nSelect ID -- <$macrocall $name=idSelector />\\n\\n----\\n\\n<$list filter=\\\"[all[shadows+tiddlers]tag[$:/tags/TextEditor/LinePrefix]!has[draft.of]sort[title]]\\\" variable=\\\"linePrefix\\\">\\n\\n<<preview-type-button>>\\n\\n</$list>\\n\\n----\\n\\n<$button tag=\\\"a\\\">\\n\\n<$action-sendmessage\\n\\t$message=\\\"tm-new-tiddler\\\"\\n\\ttags=\\\"$:/tags/TextEditor/LinePrefix\\\"\\n\\tcaption=\\\"New Line Prefix\\\"\\n\\ttext=\\\"\\\"\\n/>\\n\\n<$action-deletetiddler \\n\\t$tiddler=<<dropdown-state>> \\n/>\\n\\n<em>\\n\\n<$text text={{$:/language/Buttons/Stamp/Caption/New}}/>\\n\\n</em>\\n\\n</$button>\\n\"\n        },\n        \"$:/plugins/wikilabs/custom-markup/EditorToolbar/preview-type\": {\n            \"title\": \"$:/plugins/wikilabs/custom-markup/EditorToolbar/preview-type\",\n            \"button-classes\": \"tc-text-editor-toolbar-item-adjunct\",\n            \"caption\": \"Choose ID type\",\n            \"condition\": \"[all[shadows+tiddlers]tag[$:/tags/EditPreview]!has[draft.of]butfirst[]limit[1]]\",\n            \"description\": \"Choose ID type\",\n            \"dropdown\": \"$:/plugins/wikilabs/custom-markup/EditorToolbar/prefix-dropdown\",\n            \"icon\": \"$:/core/images/chevron-down\",\n            \"tags\": \"$:/tags/EditorToolbar\"\n        },\n        \"$:/plugins/wikilabs/custom-markup/EditorToolbar/remove-angel\": {\n            \"title\": \"$:/plugins/wikilabs/custom-markup/EditorToolbar/remove-angel\",\n            \"caption\": \"remove-angel\",\n            \"condition\": \"[<targetTiddler>!has[type]] [<targetTiddler>type[text/vnd.tiddlywiki]]\",\n            \"description\": \"Remove a \\\"angel bracket\\\" at the start of the selected line(s)\",\n            \"icon\": \"$:/plugins/wikilabs/custom-markup/icons/angel-minus\",\n            \"shortcuts\": \"((remove-angel))\",\n            \"tags\": \"$:/tags/EditorToolbar\",\n            \"text\": \"<$action-sendmessage\\n\\t$message=\\\"tm-edit-text-operation\\\"\\n\\t$param=\\\"remove-tick\\\"\\n\\tcharacter=\\\"»\\\"\\n\\tcount=\\\"1\\\"\\n/>\\n\"\n        },\n        \"$:/plugins/wikilabs/custom-markup/EditorToolbar/remove-custom-markers\": {\n            \"title\": \"$:/plugins/wikilabs/custom-markup/EditorToolbar/remove-custom-markers\",\n            \"caption\": \"remove-markers\",\n            \"tags\": \"$:/tags/EditorToolbar\",\n            \"shortcuts\": \"((remove-custom-markers))\",\n            \"icon\": \"$:/plugins/wikilabs/custom-markup/icons/custom-minus-all\",\n            \"description\": \"Remove every \\\"custom marker\\\" from the selected line(s)\",\n            \"condition\": \"[<targetTiddler>!has[type]] [<targetTiddler>type[text/vnd.tiddlywiki]]\",\n            \"text\": \"<$action-sendmessage\\n\\t$message=\\\"tm-edit-text-operation\\\"\\n\\t$param=\\\"remove-custom-markers\\\"\\n\\tcharacter=\\\"*\\\"\\n\\tcount=\\\"1\\\"\\n/>\\n\"\n        },\n        \"$:/plugins/wikilabs/custom-markup/EditorToolbar/remove-tick\": {\n            \"title\": \"$:/plugins/wikilabs/custom-markup/EditorToolbar/remove-tick\",\n            \"caption\": \"remove-tick\",\n            \"condition\": \"[<targetTiddler>!has[type]] [<targetTiddler>type[text/vnd.tiddlywiki]]\",\n            \"created\": \"20200830155036038\",\n            \"description\": \"Remove a \\\"tick\\\" at the start of the selected line(s)\",\n            \"icon\": \"$:/plugins/wikilabs/custom-markup/icons/tick-minus\",\n            \"modified\": \"20200914083802568\",\n            \"shortcuts\": \"((remove-tick))\",\n            \"type\": \"text/vnd.tiddlywiki\",\n            \"text\": \"<$action-sendmessage\\n\\t$message=\\\"tm-edit-text-operation\\\"\\n\\t$param=\\\"remove-tick\\\"\\n\\tcharacter=\\\"´\\\"\\n\\tcount=\\\"1\\\"\\n/>\\n\"\n        },\n        \"$:/plugins/wikilabs/custom-markup/EditorToolbar/toggle-tick\": {\n            \"title\": \"$:/plugins/wikilabs/custom-markup/EditorToolbar/toggle-tick\",\n            \"caption\": \"toggle-ID\",\n            \"condition\": \"[<targetTiddler>!has[type]] [<targetTiddler>type[text/vnd.tiddlywiki]]\",\n            \"description\": \"Toggle the \\\"ID\\\" at the start of the selected line(s)\",\n            \"icon\": \"$:/plugins/wikilabs/custom-markup/icons/tick-toggle\",\n            \"shortcuts\": \"((toggle-tick))\",\n            \"tags\": \"$:/tags/EditorToolbar\",\n            \"text\": \"<$action-sendmessage\\n\\t$message=\\\"tm-edit-text-operation\\\"\\n\\t$param=\\\"toggle-tick\\\"\\n\\tcharacter={{{ [{$:/config/edit/linePrefix!!id}addsuffix{$:/config/edit/linePrefix!!text}] }}}\\n\\tcount=\\\"1\\\"\\n\\tforce={{{ [{$:/config/edit/linePrefix!!force}] }}}\\n/>\\n\"\n        },\n        \"$:/tags/EditorToolbar\": {\n            \"title\": \"$:/tags/EditorToolbar\",\n            \"created\": \"20200830174644399\",\n            \"list\": \"$:/core/ui/EditorToolbar/paint $:/core/ui/EditorToolbar/opacity $:/core/ui/EditorToolbar/line-width $:/core/ui/EditorToolbar/rotate-left $:/core/ui/EditorToolbar/clear $:/core/ui/EditorToolbar/bold $:/core/ui/EditorToolbar/italic $:/core/ui/EditorToolbar/strikethrough $:/core/ui/EditorToolbar/underline $:/core/ui/EditorToolbar/superscript $:/core/ui/EditorToolbar/subscript $:/core/ui/EditorToolbar/mono-line $:/core/ui/EditorToolbar/linkify $:/core/ui/EditorToolbar/transcludify $:/core/ui/EditorToolbar/mono-block $:/core/ui/EditorToolbar/quote $:/core/ui/EditorToolbar/list-bullet $:/core/ui/EditorToolbar/list-number $:/core/ui/EditorToolbar/heading-1 $:/core/ui/EditorToolbar/heading-2 $:/core/ui/EditorToolbar/heading-3 $:/core/ui/EditorToolbar/heading-4 $:/core/ui/EditorToolbar/heading-5 $:/core/ui/EditorToolbar/heading-6 $:/core/ui/EditorToolbar/link $:/core/ui/EditorToolbar/excise $:/core/ui/EditorToolbar/picture $:/core/ui/EditorToolbar/stamp $:/core/ui/EditorToolbar/size $:/core/ui/EditorToolbar/editor-height $:/core/ui/EditorToolbar/more $:/core/ui/EditorToolbar/preview $:/core/ui/EditorToolbar/preview-type $:/plugins/wikilabs/custom-markup/EditorToolbar/add-newline $:/plugins/wikilabs/custom-markup/EditorToolbar/remove-angel $:/plugins/wikilabs/custom-markup/EditorToolbar/add-angel $:/plugins/wikilabs/custom-markup/EditorToolbar/remove-custom-markers $:/plugins/wikilabs/custom-markup/EditorToolbar/toggle-tick $:/plugins/wikilabs/custom-markup/EditorToolbar/preview-type\",\n            \"modified\": \"20200915223100053\",\n            \"type\": \"text/vnd.tiddlywiki\"\n        },\n        \"$:/plugins/wikilabs/custom-markup/history\": {\n            \"title\": \"$:/plugins/wikilabs/custom-markup/history\",\n            \"text\": \"V 0.4.2 - 2020-09-18\\n\\n* docs is on the way\\n* almost feature complete\\n** \\\\custominline needs to be improved\\n\\nV 0.0.1 - 2020-08-28\\n\\n* initial release\\n\"\n        },\n        \"$:/plugins/wikilabs/custom-markup/icons/add-newline\": {\n            \"title\": \"$:/plugins/wikilabs/custom-markup/icons/add-newline\",\n            \"text\": \"<svg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-list-bullet tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\\n <path d=\\\"m0.242 22.8h85.3v11.6h-85.3zm0 34.9h85.3v11.6h-85.3v-11.6zm0 34.9h85.3v11.6h-85.3z\\\" fill-rule=\\\"evenodd\\\" stroke-width=\\\".957\\\"/>\\n <path d=\\\"m111 47.7-21.2-8.94 21.2-9.35v5.15l9.98 3e-6 0.0422-21.9 7.26-0.0267-0.0287 29.9h-17.2z\\\" />\\n <path d=\\\"m111 82.3-21.2-8.94 21.2-9.35v5.15l9.98 3e-6 0.0422-21.9 7.26-0.0267-0.0287 29.9h-17.2z\\\" />\\n <path d=\\\"m111 117-21.2-8.94 21.2-9.35v5.15l9.98 1e-5 0.0422-21.9 7.26-0.0267-0.0287 29.9h-17.2z\\\" />\\n </svg>\"\n        },\n        \"$:/plugins/wikilabs/custom-markup/icons/angel-minus\": {\n            \"title\": \"$:/plugins/wikilabs/custom-markup/icons/angel-minus\",\n            \"text\": \"<svg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-list-bullet tc-image-button\\\" viewBox=\\\"0 0 128 128\\\"> <g fill-rule=\\\"evenodd\\\">\\r\\n <path d=\\\"m69.256 51.81h47.566v11.636h-47.566v-11.637z\\\" fill-rule=\\\"evenodd\\\"/>\\r\\n <g transform=\\\"matrix(1.5813 0 0 1.5813 -11.86 -48.2)\\\" stroke-width=\\\"1.02\\\">\\r\\n  <path d=\\\"m11.382 64.208-2.6718-2.6321 12.724-12.766-12.471-12.505 2.6539-2.6782 15.196 15.18z\\\"/>\\r\\n  <path d=\\\"m23.054 64.208-2.6718-2.6321 12.724-12.766-12.471-12.505 2.6539-2.6782 15.196 15.18z\\\"/>\\r\\n </g>\\r\\n <g transform=\\\"matrix(1.5813 0 0 1.5813 -11.86 7.9787)\\\" stroke-width=\\\"1.02\\\">\\r\\n  <path d=\\\"m11.382 64.208-2.6718-2.6321 12.724-12.766-12.471-12.505 2.6539-2.6782 15.196 15.18z\\\"/>\\r\\n  <path d=\\\"m23.054 64.208-2.6718-2.6321 12.724-12.766-12.471-12.505 2.6539-2.6782 15.196 15.18z\\\"/>\\r\\n </g>\\r\\n</svg>\"\n        },\n        \"$:/plugins/wikilabs/custom-markup/icons/angel-plus\": {\n            \"title\": \"$:/plugins/wikilabs/custom-markup/icons/angel-plus\",\n            \"text\": \"<svg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-list-bullet tc-image-button\\\" viewBox=\\\"0 0 128 128\\\"> <g fill-rule=\\\"evenodd\\\">\\r\\n <g transform=\\\"matrix(1.0801 0 0 1.0801 4.212 -17.516)\\\" fill-rule=\\\"evenodd\\\">\\r\\n  <path d=\\\"m57.573 69.333h47.566v11.636h-47.566v-11.637z\\\"/>\\r\\n  <path d=\\\"m87.174 51.368v47.566h-11.636v-47.566h11.637z\\\"/>\\r\\n </g>\\r\\n <g transform=\\\"matrix(1.7079 0 0 1.7079 -14.41 -51.918)\\\" stroke-width=\\\"1.02\\\">\\r\\n  <path d=\\\"m11.382 64.208-2.6718-2.6321 12.724-12.766-12.471-12.505 2.6539-2.6782 15.196 15.18z\\\"/>\\r\\n  <path d=\\\"m23.054 64.208-2.6718-2.6321 12.724-12.766-12.471-12.505 2.6539-2.6782 15.196 15.18z\\\"/>\\r\\n </g>\\r\\n <g transform=\\\"matrix(1.7079 0 0 1.7079 -14.41 9.7276)\\\" stroke-width=\\\"1.02\\\">\\r\\n  <path d=\\\"m11.382 64.208-2.6718-2.6321 12.724-12.766-12.471-12.505 2.6539-2.6782 15.196 15.18z\\\"/>\\r\\n  <path d=\\\"m23.054 64.208-2.6718-2.6321 12.724-12.766-12.471-12.505 2.6539-2.6782 15.196 15.18z\\\"/>\\r\\n </g>\\r\\n</svg>\"\n        },\n        \"$:/plugins/wikilabs/custom-markup/icons/custom-minus-all\": {\n            \"title\": \"$:/plugins/wikilabs/custom-markup/icons/custom-minus-all\",\n            \"text\": \"<svg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-list-bullet tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\\r\\n <g fill-rule=\\\"evenodd\\\">\\r\\n  <path d=\\\"m7.3709 38.298 19.404-15.446-15.139-5.8519-11.427 17.159z\\\"/>\\r\\n  <path d=\\\"m7.2811 73.472 19.404-15.446-15.139-5.8519-11.427 17.159z\\\"/>\\r\\n  <path d=\\\"m7.3709 108.27 19.404-15.446-15.139-5.8519-11.427 17.159zm51.424-34.072h47.566v11.636h-47.566v-11.637z\\\"/>\\r\\n </g>\\r\\n <g>\\r\\n  <path d=\\\"m62.307 8.9688-9.3409 25.33h18.716zm-3.8864-6.7841h7.8068l19.398 50.898h-7.1591l-4.6364-13.057h-22.943l-4.6364 13.057h-7.2614z\\\" style=\\\"font-variant-caps:normal;font-variant-east-asian:normal;font-variant-ligatures:normal;font-variant-numeric:normal\\\"/>\\r\\n  <path d=\\\"m92.751 0.036991h6.2727v53.045h-6.2727z\\\" style=\\\"font-variant-caps:normal;font-variant-east-asian:normal;font-variant-ligatures:normal;font-variant-numeric:normal\\\"/>\\r\\n  <path d=\\\"m121.38 0.036991h6.2727v53.045h-6.2727z\\\" style=\\\"font-variant-caps:normal;font-variant-east-asian:normal;font-variant-ligatures:normal;font-variant-numeric:normal\\\"/>\\r\\n </g>\\r\\n</svg>\\r\\n\"\n        },\n        \"$:/plugins/wikilabs/custom-markup/icons/tick-minus\": {\n            \"title\": \"$:/plugins/wikilabs/custom-markup/icons/tick-minus\",\n            \"text\": \"<svg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-list-bullet tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\\r\\n  <path d=\\\"m7.3709 38.298 19.404-15.446-15.139-5.8519-11.427 17.159zm27.539-15.48h93.09v11.637h-93.09z\\\"/>\\r\\n  <path d=\\\"m7.2811 73.472 19.404-15.446-15.139-5.8519-11.427 17.159z\\\"/>\\r\\n  <path d=\\\"m7.3709 108.27 19.404-15.446-15.139-5.8519-11.427 17.159zm51.424-34.072h47.566v11.636h-47.566v-11.637z\\\"/>\\r\\n</svg>\\r\\n\"\n        },\n        \"$:/plugins/wikilabs/custom-markup/icons/tick-plus\": {\n            \"title\": \"$:/plugins/wikilabs/custom-markup/icons/tick-plus\",\n            \"text\": \"<svg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-list-bullet tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\\r\\n  <path d=\\\"m7.3709 38.298 19.404-15.446-15.139-5.8519-11.427 17.159zm27.539-15.48h93.09v11.637h-93.09zm41.682 34.833h12.391v46.476h-12.391z\\\"/>\\r\\n  <path d=\\\"m7.2811 73.472 19.404-15.446-15.139-5.8519-11.427 17.159z\\\"/>\\r\\n  <path d=\\\"m7.3709 108.27 19.404-15.446-15.139-5.8519-11.427 17.159zm51.424-34.072h47.566v11.636h-47.566v-11.637z\\\"/>\\r\\n</svg>\\r\\n\"\n        },\n        \"$:/plugins/wikilabs/custom-markup/icons/tick-toggle\": {\n            \"title\": \"$:/plugins/wikilabs/custom-markup/icons/tick-toggle\",\n            \"text\": \"<svg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-list-bullet tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\\r\\n <g transform=\\\"translate(0 16.058)\\\" fill-rule=\\\"evenodd\\\">\\r\\n  <path d=\\\"m61.715 61.724h47.566v11.636h-47.566v-11.637z\\\"/>\\r\\n  <path d=\\\"m91.149 43.583v47.566h-11.636v-47.566h11.637z\\\"/>\\r\\n </g>\\r\\n <g fill-rule=\\\"evenodd\\\">\\r\\n  <path d=\\\"m11.228 56.264 30.441-24.231-23.75-9.1806-17.927 26.919z\\\" stroke-width=\\\"1.5688\\\"/>\\r\\n  <path d=\\\"m11.35 106.77 30.441-24.231-23.75-9.1806-17.927 26.919z\\\" stroke-width=\\\"1.5688\\\"/>\\r\\n  <path d=\\\"m61.296 27.452h47.566v11.636h-47.566v-11.637z\\\"/>\\r\\n </g>\\r\\n</svg>\\r\\n\"\n        },\n        \"$:/plugins/wikilabs/custom-markup/icons/angel-toggle\": {\n            \"title\": \"$:/plugins/wikilabs/custom-markup/icons/angel-toggle\",\n            \"text\": \"<svg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-list-bullet tc-image-button\\\" viewBox=\\\"0 0 128 128\\\"> <g fill-rule=\\\"evenodd\\\">\\r\\n <g transform=\\\"translate(5.9262 6.1069)\\\" fill-rule=\\\"evenodd\\\" stroke-width=\\\"1.08\\\">\\r\\n  <path d=\\\"m64.778 72.157h51.374v12.567h-51.374v-12.569z\\\"/>\\r\\n  <path d=\\\"m96.748 52.753v51.374h-12.567v-51.374h12.569z\\\"/>\\r\\n </g>\\r\\n <g transform=\\\"matrix(1.7079 0 0 1.7079 -14.41 -51.918)\\\" stroke-width=\\\"1.02\\\">\\r\\n  <path d=\\\"m11.382 64.208-2.6718-2.6321 12.724-12.766-12.471-12.505 2.6539-2.6782 15.196 15.18z\\\"/>\\r\\n  <path d=\\\"m23.054 64.208-2.6718-2.6321 12.724-12.766-12.471-12.505 2.6539-2.6782 15.196 15.18z\\\"/>\\r\\n </g>\\r\\n <g transform=\\\"matrix(1.7079 0 0 1.7079 -14.41 9.7276)\\\" stroke-width=\\\"1.02\\\">\\r\\n  <path d=\\\"m11.382 64.208-2.6718-2.6321 12.724-12.766-12.471-12.505 2.6539-2.6782 15.196 15.18z\\\"/>\\r\\n  <path d=\\\"m23.054 64.208-2.6718-2.6321 12.724-12.766-12.471-12.505 2.6539-2.6782 15.196 15.18z\\\"/>\\r\\n </g>\\r\\n <path d=\\\"m71.827 34.16h51.374v12.567h-51.374v-12.569z\\\" fill-rule=\\\"evenodd\\\" stroke-width=\\\"1.08\\\"/>\\r\\n</svg>\"\n        },\n        \"$:/plugins/wikilabs/custom-markup/icons/toggle-dot\": {\n            \"title\": \"$:/plugins/wikilabs/custom-markup/icons/toggle-dot\",\n            \"text\": \"<svg width=\\\"22pt\\\" height=\\\"22pt\\\" class=\\\"tc-image-list-bullet tc-image-button\\\" viewBox=\\\"0 0 128 128\\\">\\r\\n <path d=\\\"m34.91 22.818h93.09v11.637h-93.09zm0 34.91h93.09v11.636h-93.09v-11.637zm0 34.908h93.09v11.637h-93.09z\\\" fill-rule=\\\"evenodd\\\"/>\\r\\n  <path d=\\\"m12.19 28.635a5.9048 5.9048 0 0 1-5.9048 5.9048 5.9048 5.9048 0 0 1-5.9048-5.9048 5.9048 5.9048 0 0 1 5.9048-5.9048 5.9048 5.9048 0 0 1 5.9048 5.9048z\\\"/>\\r\\n  <path d=\\\"m12.063 63.175a5.9048 5.9048 0 0 1-5.9048 5.9048 5.9048 5.9048 0 0 1-5.9048-5.9048 5.9048 5.9048 0 0 1 5.9048-5.9048 5.9048 5.9048 0 0 1 5.9048 5.9048\\\"/>\\r\\n  <path d=\\\"m12 98.286a5.9048 5.9048 0 0 1-5.9048 5.9048 5.9048 5.9048 0 0 1-5.9048-5.9048 5.9048 5.9048 0 0 1 5.9048-5.9048 5.9048 5.9048 0 0 1 5.9048 5.9048\\\"/>\\r\\n </svg>\\r\\n  \\r\\n\"\n        },\n        \"$:/plugins/wikilabs/custom-markup/license\": {\n            \"title\": \"$:/plugins/wikilabs/custom-markup/license\",\n            \"text\": \"[[Custom Markup-Plugin|https://wikilabs.github.io/#custom-markup]] (c) Mario Pietsch - 2020-\\n\\nhttps://opensource.org/licenses/BSD-3-Clause\\n\"\n        },\n        \"$:/plugins/wikilabs/custom-markup/editor/operations/text/add-newline.js\": {\n            \"title\": \"$:/plugins/wikilabs/custom-markup/editor/operations/text/add-newline.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/wikilabs/custom-markup/editor/operations/text/add-newline.js\\ntype: application/javascript\\nmodule-type: texteditoroperation\\n\\nText editor operation to add a prefix to the selected lines\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports[\\\"add-newline\\\"] = function(event,operation) {\\n\\tvar x = \\\"\\\";\\n\\tvar targetCount = parseInt(event.paramObject.count + \\\"\\\",10);\\n\\t// Cut just past the preceding line break, or the start of the text\\n\\toperation.cutStart = $tw.utils.findPrecedingLineBreak(operation.text,operation.selStart);\\n\\t// Cut to just past the following line break, or to the end of the text\\n\\toperation.cutEnd = $tw.utils.findFollowingLineBreak(operation.text,operation.selEnd);\\n\\t// Compose the required prefix\\n\\tvar prefix = $tw.utils.repeat(event.paramObject.character,targetCount);\\n\\t// Process each line\\n\\tvar lines = operation.text.substring(operation.cutStart,operation.cutEnd).split(/\\\\r?\\\\n/mg);\\n\\t$tw.utils.each(lines,function(line,index) {\\n\\t\\t// Remove and count any existing prefix characters\\n\\t\\tvar count = 0;\\n//\\t\\twhile(line.charAt(0) === event.paramObject.character) {\\n//\\t\\t\\tline = line.substring(1);\\n//\\t\\t\\tcount++;\\n//\\t\\t\\tx += prefix;\\n//\\t\\t}\\n\\t\\t// Remove any whitespace\\n\\t\\twhile(line.charAt(0) === \\\" \\\") {\\n\\t\\t\\tline = line.substring(1);\\n\\t\\t}\\n\\t\\t// We're done if we removed the exact required prefix, otherwise add it\\n\\t\\t// Apply the prefix\\n\\t\\tline =  line + prefix;\\n//\\t\\t}\\n\\t\\t// Save the modified line\\n\\t\\tlines[index] = line;\\n\\t});\\n\\t// Stitch the replacement text together and set the selection\\n\\toperation.replacement = lines.join(\\\"\\\\n\\\");\\n\\tif(lines.length === 1) {\\n\\t\\toperation.newSelStart = operation.cutStart + operation.replacement.length;\\n\\t\\toperation.newSelEnd = operation.newSelStart;\\n\\t} else {\\n\\t\\toperation.newSelStart = operation.cutStart;\\n\\t\\toperation.newSelEnd = operation.newSelStart + operation.replacement.length;\\n\\t}\\n};\\n\\n})();\\n\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"texteditoroperation\"\n        },\n        \"$:/plugins/wikilabs/custom-markup/editor/operations/text/add-tick.js\": {\n            \"title\": \"$:/plugins/wikilabs/custom-markup/editor/operations/text/add-tick.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/wikilabs/custom-markup/editor/operations/text/add-tick.js\\ntype: application/javascript\\nmodule-type: texteditoroperation\\n\\nText editor operation to add a prefix to the selected lines\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports[\\\"add-tick\\\"] = function(event,operation) {\\n\\tvar x=\\\"\\\";\\n\\tvar targetCount = parseInt(event.paramObject.count + \\\"\\\",10);\\n\\t// Cut just past the preceding line break, or the start of the text\\n\\toperation.cutStart = $tw.utils.findPrecedingLineBreak(operation.text,operation.selStart);\\n\\t// Cut to just past the following line break, or to the end of the text\\n\\toperation.cutEnd = $tw.utils.findFollowingLineBreak(operation.text,operation.selEnd);\\n\\t// Compose the required prefix\\n\\tvar prefix = $tw.utils.repeat(event.paramObject.character,targetCount);\\n\\t// Process each line\\n\\tvar lines = operation.text.substring(operation.cutStart,operation.cutEnd).split(/\\\\r?\\\\n/mg);\\n\\t$tw.utils.each(lines,function(line,index) {\\n\\t\\t// Remove and count any existing prefix characters\\n\\t\\tvar count = 0\\n\\t\\t\\tx = \\\"\\\";\\n\\t\\twhile(line.charAt(0) === event.paramObject.character) {\\n\\t\\t\\tline = line.substring(1);\\n\\t\\t\\tcount++;\\n\\t\\t\\tx += prefix;\\n\\t\\t}\\n\\t\\t// Remove any whitespace\\n\\t\\twhile(line.charAt(0) === \\\" \\\") {\\n\\t\\t\\tline = line.substring(1);\\n\\t\\t}\\n\\t\\t// We're done if we removed the exact required prefix, otherwise add it\\n\\t\\t// Apply the prefix\\n\\t\\tline = x + prefix + \\\" \\\" + line;\\n//\\t\\t}\\n\\t\\t// Save the modified line\\n\\t\\tlines[index] = line;\\n\\t});\\n\\t// Stitch the replacement text together and set the selection\\n\\toperation.replacement = lines.join(\\\"\\\\n\\\");\\n\\tif(lines.length === 1) {\\n\\t\\toperation.newSelStart = operation.cutStart + operation.replacement.length;\\n\\t\\toperation.newSelEnd = operation.newSelStart;\\n\\t} else {\\n\\t\\toperation.newSelStart = operation.cutStart;\\n\\t\\toperation.newSelEnd = operation.newSelStart + operation.replacement.length;\\n\\t}\\n};\\n\\n})();\\n\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"texteditoroperation\"\n        },\n        \"$:/plugins/wikilabs/custom-markup/editor/operations/text/remove-custom-markers.js\": {\n            \"title\": \"$:/plugins/wikilabs/custom-markup/editor/operations/text/remove-custom-markers.js\",\n            \"text\": \"/*\\\\\\r\\ntitle: $:/plugins/wikilabs/custom-markup/editor/operations/text/remove-custom-markers.js\\r\\ntype: application/javascript\\r\\nmodule-type: texteditoroperation\\r\\n\\r\\nText editor operation to add a prefix to the selected lines\\r\\n\\r\\n\\\\*/\\r\\n(function(){\\r\\n\\r\\n/*jslint node:true, browser: true */\\r\\n/*global $tw:false exports:false */\\r\\n\\\"use strict\\\";\\r\\n\\r\\nexports[\\\"remove-custom-markers\\\"] = function(event,operation) {\\r\\n\\t// regExp to detect custom markers like: \\r\\n\\t// <ID><symol><class> some text\\r\\n\\t// ´span.myClass.otherClass some text\\r\\n\\tvar regExp = /((?=´[^´])´|[»≈]{1,4}|(?=°[^°])°|(?=›[^›])›|(?=_[^_])_)((?:[^\\\\.\\\\r\\\\n\\\\s´°]+))?(\\\\.(?:[^\\\\r\\\\n\\\\s]+))?/mg;\\r\\n\\t\\r\\n\\tvar targetCount = parseInt(event.paramObject.count + \\\"\\\",10);\\r\\n\\t// Cut just past the preceding line break, or the start of the text\\r\\n\\toperation.cutStart = $tw.utils.findPrecedingLineBreak(operation.text,operation.selStart);\\r\\n\\t// Cut to just past the following line break, or to the end of the text\\r\\n\\toperation.cutEnd = $tw.utils.findFollowingLineBreak(operation.text,operation.selEnd);\\r\\n\\t// Compose the required prefix\\r\\n\\tvar prefix = $tw.utils.repeat(event.paramObject.character,targetCount);\\r\\n\\t// Process each line\\r\\n\\tvar lines = operation.text.substring(operation.cutStart,operation.cutEnd).split(/\\\\r?\\\\n/mg);\\r\\n\\t\\r\\n\\tvar test = \\\"›´°_»≈\\\";\\r\\n\\t\\r\\n\\t$tw.utils.each(lines,function(line,index) {\\r\\n\\t\\tvar fragments = line.split(\\\" \\\");\\r\\n\\t\\t\\r\\n\\t\\tvar match = fragments[0].match(regExp); \\r\\n\\t\\t\\r\\n\\t\\tif (match && (fragments[0] === match[0])) {\\r\\n\\t\\t\\tline = fragments.slice(1).join(\\\" \\\");\\r\\n\\t\\t} else if (!match && (test.indexOf(fragments[0]) !== -1)) {\\r\\n\\t\\t\\tline = fragments.slice(1).join(\\\" \\\");\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tline = fragments.join(\\\" \\\");\\r\\n\\t\\t}\\r\\n\\t\\t// Remove any whitespace\\r\\n\\t\\twhile(line.charAt(0) === \\\" \\\") {\\r\\n\\t\\t\\tline = line.substring(1);\\r\\n\\t\\t}\\r\\n\\t\\t// Save the modified line\\r\\n\\t\\tlines[index] = line;\\r\\n\\t}); \\r\\n\\t// Stitch the replacement text together and set the selection\\r\\n\\toperation.replacement = lines.join(\\\"\\\\n\\\");\\r\\n\\tif(lines.length === 1) {\\r\\n\\t\\toperation.newSelStart = operation.cutStart + operation.replacement.length;\\r\\n\\t\\toperation.newSelEnd = operation.newSelStart;\\r\\n\\t} else {\\r\\n\\t\\toperation.newSelStart = operation.cutStart;\\r\\n\\t\\toperation.newSelEnd = operation.newSelStart + operation.replacement.length;\\r\\n\\t}\\r\\n};\\r\\n\\r\\n})();\\r\\n\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"texteditoroperation\"\n        },\n        \"$:/plugins/wikilabs/custom-markup/editor/operations/text/remove-tick.js\": {\n            \"title\": \"$:/plugins/wikilabs/custom-markup/editor/operations/text/remove-tick.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/wikilabs/custom-markup/editor/operations/text/remove-tick.js\\ntype: application/javascript\\nmodule-type: texteditoroperation\\n\\nText editor operation to add a prefix to the selected lines\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nexports[\\\"remove-tick\\\"] = function(event,operation) {\\n\\tvar x = \\\"\\\";\\n\\tvar targetCount = parseInt(event.paramObject.count + \\\"\\\",10);\\n\\t// Cut just past the preceding line break, or the start of the text\\n\\toperation.cutStart = $tw.utils.findPrecedingLineBreak(operation.text,operation.selStart);\\n\\t// Cut to just past the following line break, or to the end of the text\\n\\toperation.cutEnd = $tw.utils.findFollowingLineBreak(operation.text,operation.selEnd);\\n\\t// Compose the required prefix\\n\\tvar prefix = $tw.utils.repeat(event.paramObject.character,targetCount);\\n\\t// Process each line\\n\\tvar lines = operation.text.substring(operation.cutStart,operation.cutEnd).split(/\\\\r?\\\\n/mg);\\n\\t$tw.utils.each(lines,function(line,index) {\\n\\t\\t// Remove and count any existing prefix characters\\n\\t\\tvar count = 0;\\n\\t\\twhile(line.charAt(0) === event.paramObject.character) {\\n\\t\\t\\tline = line.substring(1);\\n\\t\\t\\tcount++;\\n\\t\\t\\tx += prefix;\\n\\t\\t}\\n\\t\\t// Remove any whitespace\\n\\t\\twhile(line.charAt(0) === \\\" \\\") {\\n\\t\\t\\tline = line.substring(1);\\n\\t\\t}\\n\\t\\t// We're done if we removed the exact required prefix, otherwise add it\\n\\t\\tif(x === \\\"\\\") {\\n\\t\\t\\twhile(line.charAt(0) === \\\" \\\") {\\n\\t\\t\\t\\tline = line.substring(1);\\n\\t\\t\\t}\\n\\t\\t} else {\\n\\t\\t\\tline =  x.substring(1) + \\\" \\\" + line;\\n\\t\\t\\tx = \\\"\\\";\\n\\t\\t}\\n\\t\\t// Save the modified line\\n\\t\\tlines[index] = line;\\n\\t});\\n\\t// Stitch the replacement text together and set the selection\\n\\toperation.replacement = lines.join(\\\"\\\\n\\\");\\n\\tif(lines.length === 1) {\\n\\t\\toperation.newSelStart = operation.cutStart + operation.replacement.length;\\n\\t\\toperation.newSelEnd = operation.newSelStart;\\n\\t} else {\\n\\t\\toperation.newSelStart = operation.cutStart;\\n\\t\\toperation.newSelEnd = operation.newSelStart + operation.replacement.length;\\n\\t}\\n};\\n\\n})();\\n\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"texteditoroperation\"\n        },\n        \"$:/plugins/wikilabs/custom-markup/editor/operations/text/toggle-tick.js\": {\n            \"title\": \"$:/plugins/wikilabs/custom-markup/editor/operations/text/toggle-tick.js\",\n            \"text\": \"/*\\\\\\r\\ntitle: $:/plugins/wikilabs/custom-markup/editor/operations/text/toggle-tick.js\\r\\ntype: application/javascript\\r\\nmodule-type: texteditoroperation\\r\\n\\r\\nText editor operation to add a prefix to the selected lines\\r\\n\\r\\n\\\\*/\\r\\n(function(){\\r\\n\\r\\n/*jslint node: true, browser: true */\\r\\n/*global $tw:false exports:false */\\r\\n\\\"use strict\\\";\\r\\n\\r\\nexports[\\\"toggle-tick\\\"] = function(event,operation) {\\r\\n\\tvar targetCount = parseInt(event.paramObject.count + \\\"\\\",10);\\r\\n\\t// Cut just past the preceding line break, or the start of the text\\r\\n\\toperation.cutStart = $tw.utils.findPrecedingLineBreak(operation.text,operation.selStart);\\r\\n\\t// Cut to just past the following line break, or to the end of the text\\r\\n\\toperation.cutEnd = $tw.utils.findFollowingLineBreak(operation.text,operation.selEnd);\\r\\n\\t// Compose the required prefix\\r\\n\\tvar prefix = $tw.utils.repeat(event.paramObject.character,targetCount);\\r\\n\\t// Process each line\\r\\n\\tvar lines = operation.text.substring(operation.cutStart,operation.cutEnd).split(/\\\\r?\\\\n/mg);\\r\\n\\t$tw.utils.each(lines,function(line,index) {\\r\\n\\t\\t// Remove and count any existing prefix characters\\r\\n\\t\\tvar addPrefix = true;\\r\\n\\t\\tvar fragments = line.split(\\\" \\\");\\r\\n\\t\\tif (fragments[0] === event.paramObject.character) {\\r\\n\\t\\t\\tline = fragments.slice(1).join(\\\" \\\");\\r\\n\\t\\t\\taddPrefix = false\\r\\n\\t\\t} else {\\r\\n\\t\\t\\tline = fragments.join(\\\" \\\");\\r\\n\\t\\t}\\r\\n\\t\\t// Remove any whitespace\\r\\n\\t\\twhile(line.charAt(0) === \\\" \\\") {\\r\\n\\t\\t\\tline = line.substring(1);\\r\\n\\t\\t}\\r\\n\\t\\t// We're done if we removed the exact required prefix, otherwise add it\\r\\n\\t\\tif(addPrefix) {\\r\\n\\t\\t\\t// Apply the prefix\\r\\n\\t\\t\\tif (event.paramObject && event.paramObject.force === \\\"yes\\\") {\\r\\n\\t\\t\\t\\tline = prefix + \\\" \\\" + line;\\r\\n\\t\\t\\t} else {\\r\\n\\t\\t\\t\\tline = (line === \\\"\\\") ? line : prefix + \\\" \\\" + line;\\r\\n\\t\\t\\t}\\r\\n\\t\\t}\\r\\n\\t\\t// Save the modified line\\r\\n\\t\\tlines[index] = line;\\r\\n\\t}); \\r\\n\\t// Stitch the replacement text together and set the selection\\r\\n\\toperation.replacement = lines.join(\\\"\\\\n\\\");\\r\\n\\tif(lines.length === 1) {\\r\\n\\t\\toperation.newSelStart = operation.cutStart + operation.replacement.length;\\r\\n\\t\\toperation.newSelEnd = operation.newSelStart;\\r\\n\\t} else {\\r\\n\\t\\toperation.newSelStart = operation.cutStart;\\r\\n\\t\\toperation.newSelEnd = operation.newSelStart + operation.replacement.length;\\r\\n\\t}\\r\\n};\\r\\n\\r\\n})();\\r\\n\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"texteditoroperation\"\n        },\n        \"$:/plugins/wikilabs/custom-markup/readme\": {\n            \"title\": \"$:/plugins/wikilabs/custom-markup/readme\",\n            \"text\": \"Adds a possibilty to style text content with wikitext syntax\\n\\nIt's possible to manipulate the rules behaviour with: \\n\\n`\\\\rules only ticktext`\\n`\\\\rules excpet ticktext`\\n\"\n        },\n        \"$:/plugins/wikilabs/custom-markup/wikirules/customize.js\": {\n            \"title\": \"$:/plugins/wikilabs/custom-markup/wikirules/customize.js\",\n            \"text\": \"/*\\\\\\r\\ntitle: $:/plugins/wikilabs/custom-markup/wikirules/customize.js\\r\\ntype: application/javascript\\r\\nmodule-type: wikirule\\r\\n\\r\\nWiki pragma rule for whitespace specifications\\r\\n\\r\\n```\\r\\n\\\\customize tick=§ _element=div _endString= _mode= _params= _use=\\r\\n\\r\\n\\\\customize angel=x _element=span _params=.i.j.c.cp _endString=eee\\r\\n\\r\\n\\\\customize single=det _element=\\\"details\\\" _params=\\\"\\\" _endString=\\\"—\\\"\\r\\n\\r\\n\\\\customize degree=sum _element=\\\"summary\\\"\\r\\n\\r\\n\\\\customize underscore _element=span\\r\\n```\\r\\n\\r\\n\\\\*/\\r\\n(function(){\\r\\n\\r\\n/*jslint node: true, browser: true */\\r\\n/*global $tw:false, exports:false*/\\r\\n\\\"use strict\\\";\\r\\n\\r\\nexports.name = \\\"customize\\\";\\r\\nexports.types = {pragma: true};\\r\\n\\r\\nvar idTypes = [\\\"tick\\\", \\\"single\\\", \\\"degree\\\", \\\"underscore\\\", \\\"angel\\\", \\\"almost\\\"];\\r\\n/*\\r\\nInstantiate parse rule\\r\\n*/\\r\\nexports.init = function(parser) {\\r\\n\\tvar self = this;\\r\\n\\tthis.parser = parser;\\r\\n\\t// Regexp to match\\r\\n\\tthis.matchRegExp = /^\\\\\\\\customize[^\\\\S\\\\n]/mg;\\r\\n\\r\\n\\tthis.p = this.parser;\\r\\n\\tthis.p.configTickText = this.p.configTickText  || {};\\r\\n\\t\\r\\n\\tthis.pc = this.p.configTickText;\\r\\n\\t\\r\\n\\tidTypes.map( function(id) {\\r\\n\\t\\tself.pc[id] = self.pc[id] || {};\\r\\n\\t})\\r\\n};\\r\\n\\r\\n\\r\\n/* parse attributes\\r\\nvar s = '<option value=\\\"\\\" data-foo=\\\"{{te st}}\\\" readonly>Value 1</option>';\\r\\n\\r\\nvar test_element = document.createElement('div');\\r\\ntest_element.innerHTML = s;\\r\\n\\r\\nvar element = test_element.childNodes[0];\\r\\nvar attributes = element.attributes;\\r\\n\\r\\nfor (var i = 0; i < attributes.length; i++) {\\r\\n    var attribute = attributes[i];\\r\\n\\r\\n    console.log(attribute.name, '=>', attribute.value);\\r\\n}\\r\\n*/\\r\\n\\r\\nfunction parseAttributes(source) {\\r\\n\\tvar pos = 0,\\r\\n\\t\\tattributes= [];\\r\\n\\r\\n\\t// Process attributes\\r\\n\\tvar attribute = $tw.utils.parseAttribute(source,pos);\\r\\n\\twhile(attribute) {\\r\\n\\t\\tattributes.push(attribute);\\r\\n\\t\\tpos = attribute.end;\\r\\n\\t\\t// Get the next attribute\\r\\n\\t\\tattribute = $tw.utils.parseAttribute(source,pos);\\r\\n\\t}\\r\\n\\treturn attributes;\\r\\n}\\r\\n\\r\\n/*\\r\\nParse the most recent match\\r\\n*/\\r\\nexports.parse = function() {\\r\\n\\t// Move past the pragma invocation\\r\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\r\\n\\t// Parse line terminated by a line break\\r\\n\\tvar reMatch = /([^\\\\n]*\\\\S)|(\\\\r?\\\\n)/mg,\\r\\n\\t\\tline = \\\"\\\";\\r\\n\\treMatch.lastIndex = this.parser.pos;\\r\\n\\tvar match = reMatch.exec(this.parser.source);\\r\\n\\twhile(match && match.index === this.parser.pos) {\\r\\n\\t\\tthis.parser.pos = reMatch.lastIndex;\\r\\n\\t\\t// Exit if we've got the line break\\r\\n\\t\\tif(match[2]) {\\r\\n\\t\\t\\tbreak;\\r\\n\\t\\t}\\r\\n\\t\\t// Process the token\\r\\n\\t\\tif(match[1]) {\\r\\n\\t\\t\\tline = (match[1]);\\r\\n\\t\\t}\\r\\n\\t\\t// Match the next token\\r\\n\\t\\tmatch = reMatch.exec(this.parser.source);\\r\\n\\t}\\r\\n\\t\\r\\n\\tvar attributes = parseAttributes(line);\\r\\n\\r\\n\\t// \\\\ticktext tick=x htmlTag=div params=\\\".i.j.c.cp\\\" end=\\\"eee\\\"\\r\\n\\tvar id = \\\"X\\\", // There should be no id X!!\\r\\n//\\t\\tconfigTickText = {_mode:\\\"\\\", _element:\\\"\\\", _params:\\\"\\\", _endString:\\\"\\\"};\\r\\n\\t\\tconfigTickText = {};\\r\\n\\t\\r\\n\\t$tw.utils.each(attributes,function(token) {\\r\\n\\t\\tswitch(token.name) {\\r\\n\\t\\t\\tcase \\\"tick\\\": // fall through\\r\\n\\t\\t\\tcase \\\"angel\\\": // fall through\\r\\n\\t\\t\\tcase \\\"almost\\\": // fall through\\r\\n\\t\\t\\tcase \\\"single\\\": // fall through\\r\\n\\t\\t\\tcase \\\"underscore\\\": // fall through\\r\\n\\t\\t\\tcase \\\"degree\\\":\\r\\n\\t\\t\\t\\tid = token.name;\\r\\n\\t\\t\\t\\tconfigTickText.symbol = token.value;\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase \\\"_mode\\\":\\r\\n\\t\\t\\t\\tconfigTickText._mode = token.value;\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase \\\"_element\\\":\\r\\n\\t\\t\\t\\tconfigTickText._element = token.value;\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase \\\"_params\\\":\\r\\n\\t\\t\\t\\tconfigTickText._params = token.value;\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase \\\"_endString\\\":\\r\\n\\t\\t\\t\\tconfigTickText._endString = token.value;\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase \\\"_srcName\\\":\\r\\n\\t\\t\\t\\tconfigTickText._srcName = token.value;\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tdefault:\\r\\n\\t\\t\\t\\tconfigTickText[token.name] = token || {};\\r\\n\\t\\t}\\r\\n\\t});\\r\\n\\t\\r\\n\\t// if _debug is set by _use in an other tiddler, we need the _debugString!\\r\\n\\tvar debugString = \\\"\\\\\\\\customize\\\";\\r\\n\\tObject.keys(configTickText).map( function(x) {\\r\\n\\t\\tif (x == \\\"symbol\\\") debugString += ' ' + id + '=\\\"' + configTickText[x] + '\\\"';\\r\\n\\t\\telse if (x == \\\"_debug\\\") debugString;\\r\\n\\t\\telse debugString += ' ' + x + '=\\\"' + configTickText[x] + '\\\"'; \\r\\n\\t})\\r\\n\\tconfigTickText._debugString = debugString;\\r\\n\\r\\n\\tthis.pc[id][configTickText.symbol] = configTickText;\\r\\n\\t// No parse tree nodes to return\\r\\n\\treturn [];\\r\\n};\\r\\n\\r\\n})();\\r\\n\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"wikirule\"\n        },\n        \"$:/plugins/wikilabs/custom-markup/wikirules/pragmas/debug-customize.js\": {\n            \"title\": \"$:/plugins/wikilabs/custom-markup/wikirules/pragmas/debug-customize.js\",\n            \"text\": \"/*\\\\\\r\\ntitle: $:/plugins/wikilabs/custom-markup/wikirules/pragmas/debug-customize.js\\r\\ntype: application/javascript\\r\\nmodule-type: wikirule\\r\\n\\r\\nReturns a JSON info of parser.configTickText\\r\\n\\r\\n```\\r\\n\\\\debugcostomize\\r\\n```\\r\\n\\r\\n\\\\*/\\r\\n(function(){\\r\\n\\r\\n/*jslint node: true, browser: true */\\r\\n/*global $tw:false, exports:false*/\\r\\n\\\"use strict\\\";\\r\\n\\r\\nexports.name = \\\"debugcustomize\\\";\\r\\nexports.types = {pragma: true};\\r\\n\\t\\r\\nvar idTypes = [\\\"tick\\\", \\\"single\\\", \\\"degree\\\", \\\"underscore\\\", \\\"angel\\\", \\\"almost\\\"];\\r\\n/*\\r\\nInstantiate parse rule\\r\\n*/\\r\\nexports.init = function(parser) {\\r\\n\\tvar self = this;\\r\\n\\tthis.parser = parser;\\r\\n\\t// Regexp to match\\r\\n\\tthis.matchRegExp = /^\\\\\\\\debugcustomize[^\\\\S\\\\n]/mg;\\r\\n\\t\\r\\n\\tthis.p = this.parser;\\r\\n\\tthis.p.configTickText = this.p.configTickText  || {};\\r\\n\\t\\r\\n\\tthis.pc = this.p.configTickText;\\r\\n\\t\\r\\n\\tidTypes.map( function(id) {\\r\\n\\t\\tself.pc[id] = self.pc[id] || {};\\r\\n\\t})};\\r\\n\\r\\n/*\\r\\nParse the most recent match\\r\\n*/\\r\\nexports.parse = function() {\\r\\n\\tvar text = \\\"\\\";\\r\\n\\t\\r\\n\\t// Move past the pragma invocation\\r\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\r\\n\\t// Parse line terminated by a line break\\r\\n\\tvar reMatch = /(.*)(\\\\r?\\\\n)|$/mg;\\r\\n\\treMatch.lastIndex = this.parser.pos;\\r\\n\\tvar match = reMatch.exec(this.parser.source);\\r\\n\\tthis.parser.pos = reMatch.lastIndex;\\r\\n\\t\\r\\n\\tif (match) {\\r\\n\\t\\tswitch(match[1]) {\\r\\n\\t\\t\\tcase \\\"tick\\\":\\r\\n\\t\\t\\t\\ttext = \\\"tick:\\\\n\\\" + JSON.stringify(this.pc.tick, null, 2)\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase \\\"angel\\\":\\r\\n\\t\\t\\t\\ttext += \\\"angel:\\\\n\\\" + JSON.stringify(this.pc.angel, null, 2)\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase \\\"almost\\\":\\r\\n\\t\\t\\t\\ttext += \\\"almost:\\\\n\\\" + JSON.stringify(this.pc.almost, null, 2)\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase \\\"single\\\":\\r\\n\\t\\t\\t\\ttext += \\\"single:\\\\n\\\" + JSON.stringify(this.pc.single, null, 2)\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase \\\"underscore\\\":\\r\\n\\t\\t\\t\\ttext += \\\"underscore:\\\\n\\\" + JSON.stringify(this.pc.underscore, null, 2)\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase \\\"degree\\\":\\r\\n\\t\\t\\t\\ttext += \\\"degree:\\\\n\\\" + JSON.stringify(this.pc.degree, null, 2)\\r\\n\\t\\t\\t\\tbreak;\\r\\n\\t\\t\\tcase \\\"all\\\": // fall through\\r\\n\\t\\t\\tdefault:\\r\\n\\t\\t\\t\\ttext = JSON.stringify(this.pc, null, 2) + \\\"\\\\n\\\\n\\\"\\r\\n\\t\\t\\t\\tbreak\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\t\\r\\n\\treturn [{\\r\\n\\t\\ttype: \\\"codeblock\\\",\\r\\n\\t\\tattributes: {\\r\\n\\t\\t\\t\\tcode: {type: \\\"string\\\", value: text}\\r\\n\\t\\t}\\r\\n\\t}]\\r\\n};\\r\\n\\r\\n})();\\r\\n\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"wikirule\"\n        },\n        \"$:/plugins/wikilabs/custom-markup/wikirules/pragmas/import-custom.js\": {\n            \"title\": \"$:/plugins/wikilabs/custom-markup/wikirules/pragmas/import-custom.js\",\n            \"text\": \"/*\\\\\\r\\ntitle: $:/plugins/wikilabs/custom-markup/wikirules/pragmas/import-custom.js\\r\\ntype: application/javascript\\r\\nmodule-type: wikirule\\r\\n\\r\\nWiki pragma rule to import pragmas from other tiddlers\\r\\n\\r\\n```\\r\\n\\\\importcustom [[pragma-global]] ... filter\\r\\n```\\r\\n\\r\\n\\\\*/\\r\\n(function(){\\r\\n\\r\\n/*jslint node: true, browser: true */\\r\\n/*global $tw:false, exports:false*/\\r\\n\\\"use strict\\\";\\r\\n\\r\\nexports.name = \\\"importcustom\\\";\\r\\nexports.types = {pragma: true};\\r\\n\\r\\nvar idTypes = [\\\"tick\\\", \\\"single\\\", \\\"degree\\\", \\\"underscore\\\", \\\"angel\\\", \\\"almost\\\"];\\r\\n/*\\r\\nInstantiate parse rule\\r\\n*/\\r\\nexports.init = function(parser) {\\r\\n\\tvar self = this;\\r\\n\\tthis.parser = parser;\\r\\n\\t// Regexp to match\\r\\n\\tthis.matchRegExp = /^\\\\\\\\importcustom[^\\\\S\\\\n]/mg;\\r\\n\\t\\r\\n\\tthis.p = this.parser;\\r\\n\\tthis.p.configTickText = this.p.configTickText  || {};\\r\\n\\t\\r\\n\\tthis.pc = this.p.configTickText;\\r\\n\\t\\r\\n\\tidTypes.map( function(id) {\\r\\n\\t\\tself.pc[id] = self.pc[id] || {};\\r\\n\\t})\\r\\n};\\r\\n\\r\\n/*\\r\\nParse the most recent match\\r\\n*/\\r\\nexports.parse = function() {\\r\\n\\tvar self = this,\\r\\n\\t\\tfilter,\\r\\n\\t\\ttiddlerList;\\r\\n\\r\\n\\t// Move past the pragma invocation\\r\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\r\\n\\t// Parse line terminated by a line break\\r\\n\\tvar reMatch = /(.*)(\\\\r?\\\\n)|$/mg;\\r\\n\\treMatch.lastIndex = this.parser.pos;\\r\\n\\tvar match = reMatch.exec(this.parser.source);\\r\\n\\tthis.parser.pos = reMatch.lastIndex;\\r\\n\\t\\r\\n\\tif (match) {\\r\\n\\t\\tfilter = match[1];\\r\\n\\t\\ttiddlerList = $tw.wiki.filterTiddlers(filter);\\r\\n\\t}\\r\\n\\r\\n\\t$tw.utils.each(tiddlerList,function(title) {\\r\\n\\t\\tvar pragmaInParser = $tw.wiki.parseText(\\\"text/vnd.tiddlywiki\\\", $tw.wiki.getTiddlerText(title));\\r\\n\\t\\t\\r\\n\\t\\tidTypes.map( function(id) {\\r\\n\\t\\t\\t$tw.utils.extend(self.pc[id] = pragmaInParser.configTickText[id]);\\r\\n\\t\\t})\\r\\n\\t});\\r\\n\\r\\n\\t// No parse tree nodes to return\\r\\n\\treturn [];\\r\\n};\\r\\n\\r\\n})();\\r\\n\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"wikirule\"\n        },\n        \"$:/plugins/wikilabs/custom-markup/wikirules/tickinline.js\": {\n            \"title\": \"$:/plugins/wikilabs/custom-markup/wikirules/tickinline.js\",\n            \"text\": \"/*\\\\\\r\\ntitle: $:/plugins/wikilabs/custom-markup/wikirules/tickinline.js\\r\\ntype: application/javascript\\r\\nmodule-type: wikirule\\r\\n\\r\\nWiki text inline rule for assigning styles and classes to inline runs. For example:\\r\\n\\r\\n```\\r\\n´´name.my.Class This is some text with a class´´\\r\\n```\\r\\n\\r\\n\\r\\n\\\\*/\\r\\n(function(){\\r\\n\\r\\n/*jslint node: true, browser: true */\\r\\n/*global $tw:false exports:false */\\r\\n\\\"use strict\\\";\\r\\n\\r\\nexports.name = \\\"tickinline\\\";\\r\\nexports.types = {inline: true};\\r\\n\\r\\nexports.init = function(parser) {\\r\\n\\tthis.parser = parser;\\r\\n\\t// Regexp to match\\r\\n\\tthis.matchRegExp = /°°(\\\\.(?:[^\\\\r\\\\n\\\\s]+))?/mg; // OK\\r\\n//\\tthis.matchRegExp = /´´((?:[^\\\\.\\\\r\\\\n\\\\s]+))?(\\\\.(?:[^\\\\r\\\\n\\\\s]+))?/mg;\\r\\n//\\tthis.matchRegExp = /´´((?:[^\\\\.\\\\r\\\\n\\\\s:]+:[^\\\\r\\\\n;]+;)+)?(\\\\.(?:[^\\\\r\\\\n\\\\s]+)\\\\s+)?/mg;\\r\\n};\\r\\n\\r\\nexports.parse = function() {\\r\\n\\tvar reEnd = /°°/g;\\r\\n\\t// Get the styles and class\\r\\n\\tvar stylesString = this.match[1],\\r\\n\\t\\tclassString = this.match[1] ? this.match[1].split(\\\".\\\").join(\\\" \\\") : undefined;\\r\\n\\t// Move past the match\\r\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\r\\n\\t// Parse the run up to the terminator\\r\\n\\tvar tree = this.parser.parseInlineRun(reEnd,{eatTerminator: true});\\r\\n\\t// Return the classed span\\r\\n\\tvar node = {\\r\\n\\t\\ttype: \\\"element\\\",\\r\\n\\t\\ttag: \\\"span\\\",\\r\\n\\t\\tattributes: {\\r\\n\\t\\t\\t\\\"class\\\": {type: \\\"string\\\", value: \\\"wltc wltc-inline\\\"}\\r\\n\\t\\t},\\r\\n\\t\\tchildren: tree\\r\\n\\t};\\r\\n\\tif(classString) {\\r\\n\\t\\t$tw.utils.addClassToParseTreeNode(node,classString);\\r\\n\\t}\\r\\n//\\tif(stylesString) {\\r\\n//\\t\\t$tw.utils.addAttributeToParseTreeNode(node,\\\"style\\\",stylesString);\\r\\n//\\t}\\r\\n\\treturn [node];\\r\\n};\\r\\n\\r\\n})();\\r\\n\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"wikirule\"\n        },\n        \"$:/plugins/wikilabs/custom-markup/wikirules/ticktext.js\": {\n            \"title\": \"$:/plugins/wikilabs/custom-markup/wikirules/ticktext.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/plugins/wikilabs/custom-markup/wikirules/ticktext.js\\ntype: application/javascript\\nmodule-type: wikirule\\n\\nWiki text block rule for ticktext and angeltext\\n\\nDetect\\n\\n´asdf.my.Class This is some text with a name and class\\n´.a.b.c.d This is some text with class\\n\\n»»»asdf.my.Class This is some text with a name and class\\n».a.b.c.d This is some text with class\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw:false exports:false */\\n\\\"use strict\\\";\\n\\nvar CLASS_GROUP = \\\"wltc\\\";\\nvar CLASS_PREFIX = CLASS_GROUP + \\\"-l\\\"; // l .. level\\n\\nexports.name = \\\"ticktext\\\";\\nexports.types = {block: true};\\n\\t\\nvar idTypes = \\\"tick,single,degree,underscore,angel,almost\\\".split(\\\",\\\");\\n\\nexports.init = function(parser) {\\n\\tthis.parser = parser;\\n\\n\\tvar self = this;\\n\\n\\t// Regexp to match \\n\\t// match[1] ... all symbols 1-4 ´ or » or ° or , or _\\n\\t// match[2] ... htmlTag ... default DIV\\n\\t// match[3] ... classString\\n\\tthis.matchRegExp = /((?=´[^´])´|[»≈]{1,4}|(?=°[^°])°|(?=›[^›])›|(?=_[^_])_)((?:[^\\\\.\\\\r\\\\n\\\\s´°]+))?(\\\\.(?:[^\\\\r\\\\n\\\\s]+))?/mg; //a  OK\\n\\t\\n\\tthis.p = this.parser;\\n\\tthis.p.configTickText = this.p.configTickText || {};\\n\\t\\n\\tthis.pc = this.p.configTickText;\\n\\t\\n\\tidTypes.map( function(id) {\\n\\t\\tself.pc[id] = self.pc[id] || {};\\n\\t})\\n\\t\\n\\tthis.pc.X = {}; // There is a naming problem\\n};\\n\\n/*\\nParse the most recent match\\n*/\\nexports.parse = function() {\\n\\t/*\\n\\tSkip the endstring at the current position. Options are:\\n\\ttreatNewlinesAsNonWhitespace: true if newlines are NOT to be treated as whitespace\\n\\t*/\\n\\tfunction skipEndString (endString) {\\n\\t\\tvar endRegExp = new RegExp(\\\"(\\\" + $tw.utils.escapeRegExp(endString) + \\\")\\\",\\\"mg\\\")\\n\\t\\tendRegExp.lastIndex = self.parser.pos;\\n\\t\\tvar endMatch = endRegExp.exec(self.parser.source);\\n\\t\\tif(endMatch && endMatch.index === self.parser.pos) {\\n\\t\\t\\tself.parser.pos = endRegExp.lastIndex;\\n\\t\\t}\\n\\t}\\n\\n//---------------------\\n\\tvar self = this,\\n\\t\\ttree = [],\\n\\t\\troot = [];\\n\\n\\t// Get all the details of the match\\n\\tvar id,\\n\\t\\tlevel   = this.match[1].length,\\n\\t\\tsym     = this.match[2], // needs to be undefined if no match\\n\\t\\t_params  = (this.match[3]) ? this.match[3] : \\\"\\\";\\n\\n\\tvar useParagraph = false; // use paragraph by default\\n\\n\\tswitch (this.match[1][0]) {\\n\\t\\tcase \\\"»\\\":\\n\\t\\t\\tid = \\\"angel\\\";\\n\\t\\t\\tuseParagraph = true;\\n\\t\\tbreak;\\n\\t\\tcase \\\"≈\\\":\\n\\t\\t\\tid = \\\"almost\\\";\\n\\t\\t\\tuseParagraph = true;\\n\\t\\tbreak;\\n\\t\\tcase \\\"´\\\":\\n\\t\\t\\tid = \\\"tick\\\"\\n\\t\\tbreak;\\n\\t\\tcase \\\"›\\\":\\n\\t\\t\\tid = \\\"single\\\"\\n\\t\\tbreak;\\n\\t\\tcase \\\"_\\\":\\n\\t\\t\\tid = \\\"underscore\\\"\\n\\t\\tbreak;\\n\\t\\tcase \\\"°\\\":\\n\\t\\t\\tid = \\\"degree\\\"\\n\\t\\tbreak;\\n\\t}\\n\\n\\t// \\\"_debug\\\" is a binary parameter\\n\\tvar options = {symbol: sym, _mode : \\\"inline\\\", _element : (useParagraph) ? \\\"p\\\" : \\\"div\\\", _params : _params,\\n\\t\\t_endString : \\\"\\\", _use: \\\"\\\", _debug: false, _debugString: \\\"\\\", _srcName:\\\"src\\\"};\\n\\n\\tvar textEndInner,\\n\\t\\ttextStartInner,\\n\\t\\ttextEnd,\\n\\t\\ttextStart = this.parser.pos; // remember text postions for widget text handling\\n\\n\\t// Move past the start symbol\\n\\tthis.parser.pos = this.matchRegExp.lastIndex;\\n\\t\\n\\tthis.parser.skipWhitespace({treatNewlinesAsNonWhitespace: true});\\n\\t// remember text postions for macro src handling\\n\\ttextStartInner = this.parser.pos\\n\\t// Parse any classes, whitespace and then the heading itself\\n\\tvar classes = _params.split(\\\".\\\");\\n\\n\\tvar forceDebug = false;\\n\\t\\n\\tif (!sym && this.pc[id][\\\"true\\\"]) {\\n\\t// ID is locally defined\\n\\t\\tforceDebug = (this.pc[id][\\\"true\\\"]._debug) ? this.pc[id][\\\"true\\\"]._debug : false;\\n\\t\\tsym = (this.pc[id][\\\"true\\\"]._use) ? this.pc[id][\\\"true\\\"]._use : true;\\n\\t} else if (sym && this.pc[id][sym] && this.pc[id][sym]._use) {\\n\\t// ID and _use are locally defined\\n\\t\\tforceDebug = (this.pc[id][sym]._debug) ? this.pc[id][sym]._debug : false;\\n\\t\\tsym = this.pc[id][sym]._use;\\n\\t} else if (sym !== \\\"\\\") {\\n\\t// Check if symbol is an HTML element\\n\\t\\toptions._element = ($tw.config.htmlBlockElements.indexOf(sym) !== -1) ? sym : options._element;\\n\\t}\\n\\t\\n\\tif (this.pc[id][sym]) {\\n\\t\\toptions.symbol = this.pc[id][sym].symbol || options.symbol;\\n\\t\\toptions._endString = this.pc[id][sym]._endString || options._endString;\\n\\t\\toptions._mode = this.pc[id][sym]._mode || options._mode;\\n\\t\\toptions._element = this.pc[id][sym]._element || options._element;\\n\\t\\toptions._params = this.pc[id][sym]._params || options._params;\\n\\t\\t\\n\\t\\tif (forceDebug) options._debug = forceDebug;\\n\\t\\telse options._debug = this.pc[id][sym]._debug || options._debug;\\n\\t\\t\\n\\t\\toptions._debugString = this.pc[id][sym]._debugString || options._debugString;\\n\\t\\toptions._srcName = this.pc[id][sym]._srcName || options._srcName;\\n\\t\\tclasses = (options._params + _params).split(\\\".\\\") // pragma _params are added to tick _params\\n//\\t\\tclasses[0] = options._params.split(\\\".\\\").join(\\\" \\\").trim() // replace the name element\\n\\t}\\n\\t\\n\\tthis.parser.skipWhitespace({treatNewlinesAsNonWhitespace: true});\\n\\n\\tif (options._mode === \\\"block\\\") {\\n\\t// standard rendering\\n\\t\\t// no GROUP in block mode\\n\\t\\tclasses.push(CLASS_PREFIX + level);\\n\\t\\t\\n\\t\\tif (options._endString === \\\"\\\") options._endString = (useParagraph) ? \\\"\\\\r?\\\\n\\\\r?\\\\n\\\" : \\\"\\\\r?\\\\n\\\";\\n\\t\\t\\n//\\t\\ttree = this.parser.parseBlocks(\\\"^\\\" + $tw.utils.escapeRegExp(options._endString) + \\\"$\\\");\\n//\\t\\ttree = this.parser.parseBlocks($tw.utils.escapeRegExp(options._endString));\\n\\t\\ttree = this.parser.parseBlocks(options._endString);\\n\\t} else {\\n\\t\\t// apply CLASS_GROUP only if in inline mode. \\n\\t\\tclasses.push(CLASS_PREFIX + level + \\\" \\\" + CLASS_GROUP);\\n\\n\\t\\tif (options._endString === \\\"\\\") {\\n\\t\\t\\ttree = this.parser.parseInlineRun((useParagraph) ? /(\\\\r?\\\\n\\\\r?\\\\n)/mg : /(\\\\r?\\\\n)/mg);// OK for single new-line\\n\\t\\t} else {\\n\\t\\t\\ttree = this.parser.parseInlineRun(new RegExp(\\\"(^\\\" + $tw.utils.escapeRegExp(options._endString) + \\\"$)\\\",\\\"mg\\\"));\\n\\t\\t}\\n\\t}\\n\\t// remember text postions for macro src handling\\n\\ttextEndInner = this.parser.pos - options._endString.length;\\n\\n\\tskipEndString(options._endString);\\n\\t\\n\\ttextEnd = this.parser.pos;\\n\\n\\tvar attributes = {\\n\\t\\t\\t\\\"class\\\": {type: \\\"string\\\", value: classes.join(\\\" \\\").trim()}\\n\\t\\t}\\n\\t\\n\\tvar fixAttributes = [\\\"tick\\\", \\\"angel\\\", \\\"almost\\\", \\\"single\\\", \\\"underscore\\\", \\\"degree\\\", \\\"symbol\\\",\\n\\t\\t\\t\\t\\t\\t \\\"_endString\\\", \\\"_mode\\\", \\\"_element\\\", \\\"_params\\\", \\\"_use\\\", \\\"_debug\\\", \\\"_debugString\\\", \\\"_srcName\\\"];\\n\\n\\t// Callback is invoked with (element,title,object)\\n\\t$tw.utils.each(this.pc[id][sym], function(val,title,obj) {\\n\\t\\tif (fixAttributes.indexOf(title) === -1) {\\n\\t\\t\\tattributes[title] = obj[title];\\n\\t\\t\\t}\\n\\t});\\n\\n\\t// show tick config and code\\n\\tvar showRendered = true;\\n\\tif (options._debug) {\\n\\t\\tswitch (options._debug) {\\n\\t\\t\\tcase \\\"both\\\":\\n\\t\\t\\t\\troot.push({type:\\\"codeblock\\\", attributes:{ code: {type:\\\"string\\\", value: options._debugString}}})\\n\\t\\t\\t\\tvar textOuter = this.parser.source.slice(textStart, textEnd);\\n\\t\\t\\t\\troot.push({type:\\\"codeblock\\\", attributes:{ code: {type:\\\"string\\\", value: textOuter}}})\\n\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"textOnly\\\":\\n\\t\\t\\t\\tshowRendered = false;\\n\\t\\t\\t\\t// intentional fall through\\n\\t\\t\\tcase \\\"text\\\":\\n\\t\\t\\t\\tvar textOuter = this.parser.source.slice(textStart, textEnd);\\n\\t//\\t\\t\\tvar textInner = this.parser.source.slice(textStartInner, textEndInner);\\n\\t\\t\\t\\troot.push({type:\\\"codeblock\\\", attributes:{ code: {type:\\\"string\\\", value: textOuter}}})\\n\\t\\t\\tbreak;\\n\\t\\t\\tcase \\\"pragmaOnly\\\":\\n\\t\\t\\t\\tshowRendered = false;\\n\\t\\t\\t\\t// intentional fall through\\n\\t\\t\\tcase \\\"pragma\\\": \\n\\t\\t\\t\\t// intentional fall through\\n\\t\\t\\tdefault:\\n\\t\\t\\t\\troot.push({type:\\\"codeblock\\\", attributes:{ code: {type:\\\"string\\\", value: options._debugString}}})\\n\\t\\t\\tbreak;\\n\\t\\t}\\n\\t}\\n\\t\\n\\tif (showRendered) {\\n\\t\\t// check if element is a widget\\n\\t\\tif (options._element[0] === \\\"$\\\") {\\n\\t//\\t\\tvar textOuter = this.parser.source.slice(textStart, textEnd);\\n\\t\\t\\tvar textInner = this.parser.source.slice(textStartInner, textEndInner);\\n\\t\\t\\tvar type = options._element.slice(1);\\n\\n\\t\\t\\tattributes[options._srcName] = {type: \\\"string\\\", value: textInner}\\n\\t\\t\\troot.push({ type: type,\\n\\t\\t\\t\\t\\t\\ttag: options._element,\\n\\t\\t\\t\\t\\t\\tattributes: attributes,\\n\\t\\t\\t\\t\\t\\tchildren: tree})\\n\\t\\t} else {\\n\\t\\t\\troot.push( { type: \\\"element\\\", tag: options._element, attributes: attributes, children: tree});\\n\\t\\t}\\n\\t}\\n\\t// Return the paragraph\\n\\treturn root;\\n};\\n})();\\n\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"wikirule\"\n        }\n    }\n}"}