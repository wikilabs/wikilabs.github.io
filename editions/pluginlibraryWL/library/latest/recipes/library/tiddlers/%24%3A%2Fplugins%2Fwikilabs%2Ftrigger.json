{"title":"$:/plugins/wikilabs/trigger","name":"Trigger","description":"Activate actions, whenever the widget is shown","author":"pmario","core-version":">=5.1.14","version":"0.1.1","list":"readme license history","plugin-type":"plugin","dependents":"","type":"application/json","text":"{\n    \"tiddlers\": {\n        \"/templates/tid-tiddler\": {\n            \"title\": \"/templates/tid-tiddler\",\n            \"created\": \"20190906130953559\",\n            \"modified\": \"20190906131037641\",\n            \"tags\": \"\",\n            \"type\": \"text/vnd.tiddlywiki\",\n            \"text\": \"<!--\\n\\nThis template is used for saving tiddlers in TiddlyWeb *.tid format\\n\\n--><$fields exclude='text bag created modified' template='$name$: $value$\\n'></$fields>`\\n`<$view field=\\\"text\\\" format=\\\"text\\\" />\"\n        },\n        \"$:/plugins/wikilabs/trigger/history\": {\n            \"title\": \"$:/plugins/wikilabs/trigger/history\",\n            \"text\": \"V 0.1.1 - 2020.12.25\\n\\n* update license\\n\\nV 0.1.0 - 2020.01.19\\n\\n* Update license link/text\\n* Out of alpha no code changes\\n\\nV 0.0.1 - alpha\\n\\n* initial release\\n** name: trigger\\n\"\n        },\n        \"$:/plugins/wikilabs/trigger/license\": {\n            \"title\": \"$:/plugins/wikilabs/trigger/license\",\n            \"text\": \"[[Trigger-Plugin|https://wikilabs.github.io/#trigger]] (C) Mario Pietsch - 2019-2021\\n\\nhttps://opensource.org/licenses/BSD-3-Clause\\n\"\n        },\n        \"log-actions\": {\n            \"title\": \"log-actions\",\n            \"created\": \"20190906144716671\",\n            \"modified\": \"20190906154301599\",\n            \"type\": \"text/vnd.tiddlywiki\",\n            \"text\": \"\\\\define getText() $(currentTiddler)$ - $(diff-count)$ - errors - $(text-x)$\\n\\n\\\\define log(xx:\\\"\\\")\\n<$set name=\\\"text-x\\\" value=\\\"\\\"\\\"$xx$\\\"\\\"\\\" emptyValue=<<text>>>\\n<$action-setfield $tiddler=\\\"log\\\" $index=<<now \\\"0hh-0mm-0ss:0XXX\\\">> $value=<<getText>>/>\\n</$set>\\n\\\\end\\n\\n\\\\define clear-log()\\n<$action-setfield $tiddler=\\\"log\\\" text=\\\"\\\" tags=\\\"$:/tags/BelowStory\\\"/>\\n<$action-setfield $tiddler=\\\"log\\\" $index=<<now \\\"0hh-0mm-0ss:0XXX\\\">> $value=<<getText>>/>\\n\\\\end\\n\\n<pre><$view field=\\\"text\\\"/></pre>\"\n        },\n        \"$:/plugins/wikilabs/trigger/readme\": {\n            \"title\": \"$:/plugins/wikilabs/trigger/readme\",\n            \"text\": \"\\n* see trigger-test-edition\\n\"\n        },\n        \"test-footer\": {\n            \"title\": \"test-footer\",\n            \"created\": \"20190906140727377\",\n            \"modified\": \"20190906152402374\",\n            \"tags\": \"$:/tags/ViewTemplate\",\n            \"type\": \"text/vnd.tiddlywiki\",\n            \"text\": \"\\\\define x1()\\n<$action-setfield $tiddler=\\\"$:/StoryList\\\" $field=list $value=<<prev>>/>\\n\\\\end\\n\\n\\\\define x2()\\n<$action-setfield $tiddler=\\\"$:/StoryList\\\" $field=list $value=<<next>>/>\\n\\\\end\\n\\n<$list filter=\\\"[all[current]tag[test]]\\\">\\n<hr>\\n<$set name=prev filter=\\\"[<currentTiddler>previous[test]else[GettingStarted]]\\\">\\n<$set name=next filter=\\\"[<currentTiddler>next[test]else[GettingStarted]]\\\">\\n<$button actions=<<x1>> tooltip=<<prev>> >previous</$button> - <$button  actions=<<x2>> tooltip=<<next>> >next</$button>\\n</$set></$set>\\n</$list>\"\n        },\n        \"$:/core/modules/widgets/trigger.js\": {\n            \"title\": \"$:/core/modules/widgets/trigger.js\",\n            \"text\": \"/*\\\\\\ntitle: $:/core/modules/widgets/trigger.js\\ntype: application/javascript\\nmodule-type: widget\\n\\nTrigger widget\\n\\n\\\\*/\\n(function(){\\n\\n/*jslint node: true, browser: true */\\n/*global $tw: false */\\n\\\"use strict\\\";\\n\\nvar Widget = require(\\\"$:/core/modules/widgets/widget.js\\\").widget;\\n\\nvar Trigger = function(parseTreeNode,options) {\\n\\tthis.initialise(parseTreeNode,options);\\n};\\n\\n/*\\nInherit from the base widget class\\n*/\\nTrigger.prototype = new Widget();\\n\\n/*\\nRender this widget into the DOM\\n*/\\nTrigger.prototype.render = function(parent,nextSibling) {\\n\\tthis.parentDomNode = parent;\\n\\tthis.computeAttributes();\\n\\tthis.execute();\\n\\tthis.trigger();\\n//\\tthis.renderChildren(parent,nextSibling);\\n};\\n\\n/*\\nCompute the internal state of the widget\\n*/\\nTrigger.prototype.execute = function() {\\n\\t// Get our parameters\\n\\tthis.catchActions = this.getAttribute(\\\"actions\\\");\\n\\n// This widget must have NO child widgets\\n// Construct the child widgets\\n//\\tthis.makeChildWidgets();\\n\\t// When executing actions we avoid trapping navigate events, so that we don't trigger ourselves recursively\\n\\tthis.executingActions = false;\\n};\\n\\n/*\\nSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\\n*/\\nTrigger.prototype.refresh = function(changedTiddlers) {\\n\\tvar changedAttributes = this.computeAttributes();\\n//\\tif(changedAttributes.actions) {\\n//\\t\\tthis.refreshSelf();\\n//\\t\\treturn true;\\n//\\t} else {\\n//\\t\\treturn this.refreshChildren(changedTiddlers);\\n//\\t}\\n};\\n\\n/*\\nHandle a tm-navigate event\\n*/\\nTrigger.prototype.trigger = function(event) {\\n\\tif(!this.executingActions) {\\n\\t\\t// Execute the actions\\n\\t\\tif(this.catchActions) {\\n\\t\\t\\tthis.executingActions = true;\\n\\t\\t\\tthis.invokeActionString(this.catchActions,this,event,{});\\n\\t\\t\\tthis.executingActions = false;\\n\\t\\t}\\n\\t}\\n\\treturn false;\\n};\\n\\nexports.trigger = Trigger;\\n\\n})();\\n\",\n            \"type\": \"application/javascript\",\n            \"module-type\": \"widget\"\n        }\n    }\n}"}